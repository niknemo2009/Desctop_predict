/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package repos_predict;


//import com.mysql.cj.protocol.Resultset;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class MainForma extends javax.swing.JFrame {
Connection con1;
Vector<Vector<String>> data=new Vector<>();
Vector<Vector<String>> dataHistory=new Vector<>();
 DefaultTableModel modTable;
 DefaultTableModel modelHistory;
 public JPopupMenu popup=new JPopupMenu();
{
    
   for(BetToday temp:BetToday.testSpisok){
      if(temp.resultMatchGuest>-1){
          Vector<String> vec=new Vector<>();
       vec.add(String.valueOf(temp.id));
       vec.add(temp.time.getHour()+" : "+temp.time.getMinute());
       vec.add(temp.country);
       vec.add(temp.teamOwner);
       vec.add(String.valueOf(temp.resultMatchOwner));
       vec.add(temp.teamGuest);
       vec.add(String.valueOf(temp.resultMatchGuest));
       vec.add(temp.betPrediction);
       vec.add(String.valueOf(temp.keff));
       vec.add(temp.state.name());
       dataHistory.add(vec);
      }else{
           Vector<String> vec=new Vector<>();
       vec.add(String.valueOf(temp.id));
       vec.add(temp.time.getHour()+" : "+temp.time.getMinute());
       vec.add(temp.country);
       vec.add(temp.teamOwner);
       //vec.add(String.valueOf(temp.resultMatchOwner));
       vec.add(temp.teamGuest);
      // vec.add(String.valueOf(temp.resultMatchGuest));
       vec.add(temp.betPrediction);
       vec.add(String.valueOf(temp.keff));
       
       data.add(vec);
      }
       
       
   }
    
}
    /**
     * Creates new form MainForma
     */
    public MainForma() {
        initComponents();
   jTable1.setDefaultRenderer(Object.class, new TableInfoRenderer());
        
        Vector<String> name_column=new Vector<>();
       Vector<String> nameH_column=new Vector<>();
       
        createRecords();
        name_column.add("ID");
        name_column.add("Time game");
        name_column.add("Place game");
        name_column.add("Team owner");
       // name_column.add("Result 1");
        name_column.add("Team guest");
        //name_column.add("Result 2");
        name_column.add("Prediction");
        name_column.add("Koef");
        
        nameH_column.add("ID");
        nameH_column.add("Time game");
        nameH_column.add("Place game");
        nameH_column.add("Team owner");
       nameH_column.add("Result 1");
        nameH_column.add("Team guest");
        nameH_column.add("Result 2");
        nameH_column.add("Prediction");
        nameH_column.add("Koef");
        nameH_column.add("State");
        this.modTable=new DefaultTableModel(data, name_column);
        jTable1.setModel(modTable);
        this.modelHistory=new DefaultTableModel(dataHistory,nameH_column);
        jTable2.setModel(modelHistory);
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setText("История");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
            .addGroup(layout.createSequentialGroup()
                .addGap(342, 342, 342)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForma().setVisible(true);
            }
        });
    }
    
    void one(){
    try {
        Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
   con1 = DriverManager.getConnection("jdbc:mysql://localhost/predictiontotoday?"
           + "verifyServerCertificate=false&useLegacyDatetimeCode=false&serverTimezone=Europe/Kiev&useSSL=false&allowPublicKeyRetrieval=true","user","useruser");
       Statement  st=con1.createStatement();
        ResultSet rs=st.executeQuery("SELECT * FROM predictiontotoday.country");
        while(rs.next()){
            System.out.println(rs.getString(2)); 
        }
        rs.close();
        st.close();
   // Do something with the Connection
//   DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/sakila?" +
//                 "useLegacyDatetimeCode=false&serverTimezone=Europe/Kiev&useSSL=false","root","gen");
//verifyServerCertificate=false&amp;autoReconnect=false&amp;useSSL=false
} catch (SQLException ex) {
    // handle any errors
    System.out.println("SQLException: " + ex.getMessage());
    System.out.println("SQLState: " + ex.getSQLState());
    System.out.println("VendorError: " + ex.getErrorCode());
}   catch (ClassNotFoundException ex) {
        Logger.getLogger(MainForma.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        Logger.getLogger(MainForma.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        Logger.getLogger(MainForma.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private void createRecords() {
      ActionListener menuListener = new ActionListener() {
      

          @Override
          public void actionPerformed(ActionEvent e) {
             // Vector temp=(Vector) modTable.getDataVector().elementAt(jTable1.getSelectedRow());
              int currentRecords=jTable1.getSelectedRow();
              Vector temp;
              switch(e.getActionCommand()){
                  case "Edit":
                      if(currentRecords==-1){
                          JOptionPane.showInternalMessageDialog(getContentPane(), "Выберите запись для редактирования .");
                          return;
                      }
                        temp=(Vector) modTable.getDataVector().elementAt(jTable1.getSelectedRow());
                      new UpdatePrediction("edit",temp).setVisible(true);
                      Vector temp1=UpdatePrediction.currentPredict;
                      modTable.setValueAt(temp1.get(2), currentRecords, 2);
                      modTable.setValueAt(temp1.get(3), currentRecords, 3);
                      modTable.setValueAt(temp1.get(4), currentRecords, 4);
                      modTable.setValueAt(temp1.get(5), currentRecords, 5);
                      modTable.setValueAt(temp1.get(6), currentRecords, 6);
                      jTable1.revalidate();
                      break;
                  case "Move to History":
                      if(currentRecords==-1){
                          JOptionPane.showInternalMessageDialog(getContentPane(), "Выберите запись для редактирования .");
                          return;
                      }
                       temp=(Vector) modTable.getDataVector().elementAt(jTable1.getSelectedRow());
                      new UpdatePrediction("edit",temp).setVisible(true);
                      break;                   
                  case "Add new":
                      new UpdatePrediction("add",null).setVisible(true);
                      break;
                     
              }
                          
          }
    };
    JMenuItem item;
    popup.add(item = new JMenuItem("Edit", new ImageIcon("edit.gif")));
    item.setHorizontalTextPosition(JMenuItem.RIGHT);
    item.addActionListener(menuListener);
    popup.addSeparator();
   popup.add(item = new JMenuItem("Move to History", new ImageIcon("2.gif")));
   item.setHorizontalTextPosition(JMenuItem.RIGHT);
   item.addActionListener(menuListener);
    popup.addSeparator();
    popup.add(item = new JMenuItem("Add new", new ImageIcon("2.gif")));
   item.setHorizontalTextPosition(JMenuItem.RIGHT);
   item.addActionListener(menuListener);
    popup.setBorder(new BevelBorder(BevelBorder.RAISED));
   jTable1.addMouseListener(new MousePopupListener());
    
    }
    class MousePopupListener extends MouseAdapter {
    public void mousePressed(MouseEvent e) {
      checkPopup(e);
    }

    public void mouseClicked(MouseEvent e) {
      checkPopup(e);
    }

    public void mouseReleased(MouseEvent e) {
      checkPopup(e);
     // Vector temp=(Vector) modTable.getDataVector().elementAt(jTable1.getSelectedRow());
       // for(Object prob:temp){
        //System.out.println(prob);
        //}
        }

    private void checkPopup(MouseEvent e) {
      //if (e.isPopupTrigger()) {
        popup.show(jTable1, e.getX(), e.getY());
      //}
    }
  }
    class TableInfoRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        JLabel c = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, false, row, column);
 
        if(column==1) c.setHorizontalAlignment(CENTER);
        else  c.setHorizontalAlignment(LEFT);
        
        
        if(c.getText().equals("2.95")) c.setBackground(Color.green);
        else c.setBackground(new JLabel().getBackground());
        return c;
    }
}
}
